#include "stdio.h"
#include "graphics.h"																					//感谢助教推荐的输出图片库
#include "conio.h"
int move(int a[][10], int x, int y);																	//x为对横坐标的操作，y为对纵坐标的操作
int play(int a[][10]);																					//对地图进行操作
int b[10][10];																							//定义一个全局数组，用于执行运算操作的数组
void lookup(int a[10][10], int *x, int *y);																//寻找人物坐标
void play1();																							//游戏的过程
void PutPicture(int a[][10]);																			//刻画地图	
IMAGE img[7];																							//创建一个用于存放图像的数组
int i, j;																								//全局变量，人物的坐标（i，j）
int win(int a[][10]);																					//判断是否完成当前关卡 
int CustomsPass = 0;																						//定义当前的地图序号
/*******************************************************************主函数***************************************************************************/
int main() {
	initgraph(600, 600);																				//设置画布大小
	setbkcolor(WHITE);																					//设置背景颜色
	cleardevice();																						//将背景颜色清空屏幕
	loadimage(&img[0], "素材\\0.jpg");																	//导入空地图像
	loadimage(&img[1], "素材\\1.jpg");																	//导入箱子图像
	loadimage(&img[2], "素材\\2.jpg");																	//导入墙壁图像
	loadimage(&img[3], "素材\\3.jpg");																	//导入目的地图像
	loadimage(&img[4], "素材\\4.jpg");																	//导入人物图像
	loadimage(&img[5], "素材\\5.jpg");																	//导入目的地上的箱子图像
	loadimage(&img[6], "素材\\6.jpg");																	//导入在目的地的人物图像
	play1();																							//游戏过程
	closegraph();																						//关闭图形环境
	return 0;
}
/***********************************************************游戏过程**********************************************************************************/
void play1() {	
	int map[5][10][10] = {																				//定义三维地图数组
					{	{0},	
						{0, 0, 2, 2, 2},
						{0, 0, 2, 2, 2},
						{0, 0, 2, 3, 2},
						{0, 0, 2, 0, 2, 2, 2, 2},
						{2, 2, 2, 1, 0, 1, 3, 2},
						{2, 3, 0, 1, 4, 2, 2, 2},
						{2, 2, 2, 2, 1, 2},
						{0, 0, 0, 2, 3, 2},
						{0, 0, 0, 2, 2, 2}
					},
					{	{2, 2, 2, 2, 2},
						{2, 4, 0, 0, 2},
						{2, 0, 1, 1, 2, 0, 2, 2, 2},
						{2, 0, 1, 0, 2, 0, 2, 3, 2},
						{2, 2, 2, 0, 2, 2, 2, 3, 2},
						{0, 2, 2, 0, 0, 0, 0, 3, 2},
						{0, 2, 0, 0, 0, 2, 0, 0, 2},
						{0, 2, 0, 0, 0, 2, 2, 2, 2},
						{0, 2, 2, 2, 2, 2}
					},
					{	{0, 2, 2, 2, 2},
						{0, 2, 4, 0, 2, 2, 2},
						{0, 2, 0, 1, 0, 0, 2},
						{2, 2, 2, 0, 2, 0, 2, 2},
						{2, 3, 2, 0, 2, 0, 0, 2},
						{2, 3, 1, 0, 0, 2, 0, 2},
						{2, 3, 0, 0, 0, 1, 0, 2},
						{2, 2, 2, 2, 2, 2, 2, 2}
					},
					{	{0, 2, 2, 2, 2, 2, 2, 2},
						{0, 2, 0, 4, 3, 3, 3, 2},
						{0, 2, 0, 0, 0, 2, 2, 2, 2},
						{2, 2, 2, 1, 0, 0, 0, 0, 2},
						{2, 0, 0, 0, 2, 1, 2, 0, 2},
						{2, 0, 1, 0, 2, 0, 0, 0, 2},
						{2, 0, 0, 0, 2, 2, 2, 2, 2},
						{2, 2, 2, 2, 2}
					},
					{	{0, 2, 2, 2, 2, 2},
						{0, 2, 0, 4, 0, 2, 2, 2},
						{2, 2, 0, 2, 1, 0, 0, 2},
						{2, 0, 5 ,3, 0, 3, 0, 2},
						{2, 0, 0, 1, 1, 0, 2, 2},
						{2, 2, 2, 0, 2, 3, 2},
						{0, 0, 2, 0, 0, 0, 2},
						{0, 0, 2, 2, 2, 2, 2}
					}
	};
	for (CustomsPass = 0; CustomsPass < 5; CustomsPass++) {
		do {
			for (int x = 0; x < 10; x++) {
				for (int y = 0; y < 10; y++) {
					b[x][y] = map[CustomsPass][x][y];		//将进行的关卡导入当前地图
				}
			}
			play(b);
		} while (play(b) == 1);								//如果play返回1，满足循环条件，说明需要重新导入当前关卡
	}														//否则将执行大循环，将下一关卡导入当前地图
}
/************************************************************************对地图进行移动***************************************************************/
int move(int a[][10], int x, int y) {
	if (a[i][j] == 6) {										//当前人物在目的地上
		if (a[i + x][j + y] == 0) {							//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			a[i + x][j + y] = 4;
			a[i][j] = 3;
			PutPicture(a);
			i += x;
			j += y;
		}
		else if (a[i + x][j + y] == 1) {					//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			if (a[i + 2 * x][j + 2 * y] == 0) {
				a[i + 2 * x][j + 2 * y] = 1;
				a[i + x][j + y] = 4;
				a[i][j] = 3;
				PutPicture(a);
				i += x;
				j += y;
			}
			else if (a[i + 2 * x][j + 2 * y] == 3) {		//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
				a[i + 2 * x][j + 2 * y] = 5;
				a[i + x][j + y] = 4;
				a[i][j] = 3;
				PutPicture(a);
				i += x;
				j += y;
			}
			else
				return 0;									//0代表此次操作无效
		}
		else if (a[i + x][j + y] == 3) {					//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			a[i + x][j + y] = 6;
			a[i][j] = 3;
			PutPicture(a);
			i += x;
			j += y;
		}
		else if (a[i + x][j + y] == 5) {					//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			if (a[i + 2 * x][j + 2 * y] == 0) {
				a[i + 2 * x][j + 2 * y] = 1;
				a[i + x][j + y] = 4;
				a[i][j] = 3;
				PutPicture(a);
				i += x;
				j += y;
			}
			else if (a[i + 2 * x][j + 2 * y] == 3) {		//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
				a[i + 2 * x][j + 2 * y] = 5;
				a[i + x][j + y] = 6;
				a[i][j] = 3;
				PutPicture(a);
				i += x;
				j += y;
			}
			else
				return 0;									//0代表此次操作无效
		}
		else
			return 0;										//0代表此次操作无效
	}
	else {													//当前人物不在目的地上
		if (a[i + x][j + y] == 0) {							//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			a[i + x][j + y] = 4;
			a[i][j] = 0;
			PutPicture(a);
			i += x;
			j += y;
		}
		else if (a[i + x][j + y] == 1) {					//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			if (a[i + 2 * x][j + 2 * y] == 0) {
				a[i + 2 * x][j + 2 * y] = 1;
				a[i + x][j + y] = 4;
				a[i][j] = 0;
				PutPicture(a);
				i += x;
				j += y;
			}
			else if (a[i + 2 * x][j + 2 * y] == 3) {		//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
				a[i + 2 * x][j + 2 * y] = 5;
				a[i + x][j + y] = 4;
				a[i][j] = 0;
				PutPicture(a);
				i += x;
				j += y;
			}
			else
				return 0;									//0代表此次操作无效
		}
		else if (a[i + x][j + y] == 3) {					//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			a[i + x][j + y] = 6;
			a[i][j] = 0;
			PutPicture(a);
			i += x;
			j += y;
		}
		else if (a[i + x][j + y] == 5) {					//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
			if (a[i + 2 * x][j + 2 * y] == 0) {
				a[i + 2 * x][j + 2 * y] = 1;
				a[i + x][j + y] = 6;
				a[i][j] = 0;
				PutPicture(a);
				i += x;
				j += y;
			}
			else if (a[i + 2 * x][j + 2 * y] == 3) {		//0代表空地，1代表箱子，2代表墙壁，3代表目的地，4代表人物，5代表目的地上的箱子，6为在目的地上的人物
				a[i + 2 * x][j + 2 * y] = 5;
				a[i + x][j + y] = 6;
				a[i][j] = 0;
				PutPicture(a);
				i += x;
				j += y;
			}
			else
				return 0;									//0代表此次操作无效
		}
		else
			return 0;										//0代表此次操作无效
	}
}
/********************************************************************对地图进行操作*******************************************************************/
int play(int a[][10]) {
	int x, y, b = 0;
	lookup(a, &i, &j);										//寻找人物坐标（i，j）
	PutPicture(a);											//刻画地图
	while (win(a) != 1) {
		switch (_getch()) {									//从键盘获取操作
		case 'W':
		case 'w':
		case 72:
			move(a, -1, 0);
			break;											//上移
		case 'S':
		case 's':
		case 80:
			move(a, 1, 0);
			break;											//下移
		case 'A':
		case 'a':
		case 75:
			move(a, 0, -1);
			break;											//左移
		case 'D':
		case 'd':
		case 77:
			move(a, 0, 1);
			break;											//右移
		case 'R':
		case 'r':
			return 1;
			break;											//重新开始
		}
	}
	return 0;
}
/**************************************************************************寻找人物坐标******************************************************************/
void lookup(int a[10][10], int *i, int *j) {
	int x, y;
	for (x = 0; x < 10; x++) {
		for (y = 0; y < 10; y++) {
			if (a[x][y] == 4) {								//4代表人物
				*i = x;										//i代表人物的横坐标
				*j = y;										//j代表人物的纵坐标
				break;
			}
		}
	}
}
/**************************************************************************刻画地图**********************************************************************/
void PutPicture(int a[][10]) {
	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			putimage(60 * y, 60 * x, &img[a[x][y]]);		//逐个点进行输出图像
		}
	}
}
/*************************************************************************计算没有到达目的地箱子的个数****************************************************/
/*
int win(int a[][10]){
	int count = 0;
	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			if (a[x][y] == 3 && a[x][y] != 6)				//判断是否还有箱子未到达目的地，3代表目的地，6代表在目的地上的人物
				count++;
		}
	}
	if (count == 0)
		return 1;											//1代表全部箱子已经到达目的地
	else
		return 0;											//0代表还有箱子暂未到达目的地
}
*/
int win(int a[][10]) {
	int count = 0, number[5] = { 4,3,3,3,4 };
	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			if (a[x][y] == 5)
				count++;
		}
	}
	if (count == number[CustomsPass])
		return 1;											//1代表全部箱子已经到达目的地
	else
		return 0;											//0代表还有箱子暂未到达目的地
}